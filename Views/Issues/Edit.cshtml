@model Bug_Lite.Models.Issue
@using Bug_Lite.HelperClasses

@{
    ViewBag.Title = "Edit Issue";
}

<script type="text/javascript">
    $(document).ready(function () {
        // Load FDOT Release Versions Dropdown
        var selectedCADDProductId = $("select#CADDSoftwareProductId").val();
        var releaseVersionsSelect = $("select#FDOTReleaseVersionId");
        var selectedReleaseVersionId = $("select#FDOTReleaseVersionId").val();

        // Initialize FDOTReleaseVersions Select
        releaseVersionsSelect.empty();
        releaseVersionsSelect.append($('<option value="">--- Select ---</option>'));

        // If selected CADD Product Id Not Null or Blank
        if (selectedCADDProductId != null) {
            $.getJSON('@Url.Action("GetReleaseVersionsList")', { caddProductId: selectedCADDProductId },
            function (versionData) {
                // Update FDOT Release Versions dropdown based on selected CADD Software Product
                $.each(versionData, function (index, version) {
                    if (version.Value == selectedReleaseVersionId) {
                        releaseVersionsSelect.append($('<option value="' + version.Value + '" selected="selected">' + version.Text + '</option>'));
                    }
                    else {
                        releaseVersionsSelect.append($('<option/>', { value: version.Value, text: version.Text }));
                    }
                });
            });
        }

        // Load ECSO Support Products Dropdown
        var selectedCategoryId = $("select#ECSOSupportCategoryId").val();
        var supportProductsSelect = $("select#ECSOSupportProductId");
        var selectedSupportProductId = $("select#ECSOSupportProductId").val();

        // Initialize ECSOSupportProducts Select
        supportProductsSelect.empty();
        supportProductsSelect.append($('<option value="">--- Select ---</option>'));

        // If selected Support Category Not Null or Blank
        if (selectedCategoryId != null) {
            $.getJSON('@Url.Action("GetSupportProductsList")', { supportCategoryId: selectedCategoryId },
            function (productData) {
                // Update ECSO Support Products dropdown based on selected ECSO Support Category
                $.each(productData, function (index, product) {
                    if (product.Value == selectedSupportProductId) {
                        supportProductsSelect.append($('<option value="' + product.Value + '" selected="selected">' + product.Text + '</option>'));
                    }
                    else {
                        supportProductsSelect.append($('<option/>', { value: product.Value, text: product.Text }));
                    }
                });
            });
        }
    });
</script>

<script type="text/javascript">
    $(function () {

        $("select#CADDSoftwareProductId").change(function () {
            var selectedCADDProductId = $(this).val();
            var releaseVersionsSelect = $("select#FDOTReleaseVersionId");

            // Clear FDOTReleaseVersions Select
            releaseVersionsSelect.empty();
            releaseVersionsSelect.append($('<option value="">--- Select ---</option>'));

            if (selectedCADDProductId != null) {
                $.getJSON('@Url.Action("GetReleaseVersionsList")', { caddProductId: selectedCADDProductId },
                function (versionData) {
                    $.each(versionData, function (index, version) {
                        releaseVersionsSelect.append($('<option/>', { value: version.Value, text: version.Text }));
                    });
                });
            }
        });

        $("select#ECSOSupportCategoryId").change(function () {
            var selectedCategoryId = $(this).val();
            var supportProductsSelect = $("select#ECSOSupportProductId");

            // Clear ECSOSupportProductId Select
            supportProductsSelect.empty();
            supportProductsSelect.append($('<option value="">--- Select ---</option>'));

            if (selectedCategoryId != null) {
                $.getJSON('@Url.Action("GetSupportProductsList")', { supportCategoryId: selectedCategoryId },
                function (productData) {
                    $.each(productData, function (index, product) {
                        supportProductsSelect.append($('<option/>', { value: product.Value, text: product.Text }));
                    });
                });
            }
        });
    });
</script>

<!-- Script for binding\fetching contact details to View -->
<script type="text/javascript">
    $(function () {
        $('#Contacts').change(function () {
            /*GET*/
            var contactId = $(this).val();

            // Uncomment the line below for Deployment to Server due to the difference in Physical Path Location. *MGD*
              $.getJSON("/BugLite/Issues/SearchContactsById?id=" + contactId,
            //$.getJSON("/Contact/SearchContactsById?id=" + contactId,
           
                function (data) {
                    // Gets Contact Display Fields
                    $('#ContactId').val(data.ContactId);  // Gets Contact's Id

                    $('#TextContactName').val(data.ContactName);
                    $('#TextContactNumber').val(data.ContactNumber);
                    $('#TextContactEmail').val(data.EmailAddress);
                });
        });
    });
</script>

@using (Html.BeginForm("Edit", "Issues", FormMethod.Post, new { id = "EditIssueFormId", enctype = "multipart/form-data"}))
{     
       @Html.ValidationSummary(true)
   
        <!-- Non-Editable fields must be on form to be available for HTTPPost -->
        @Html.HiddenFor(model => model.IssueId)
        @Html.HiddenFor(model => model.IssueCode)
        @Html.HiddenFor(model => model.CreatedById)
        @Html.HiddenFor(model => model.CreateDate)
        @Html.HiddenFor(model => model.ModifiedDate)        
        @Html.HiddenFor(model => model.ContactId)        
        @Html.Hidden("HiddenComment")

        <div class="container col-md-12 col-md-offset-0 panel panel-default">
          <ul class="breadcrumb">
           <li>@Html.ActionLink("View Issues", "Index")</li>
           <li>@Html.ActionLink("Details", "Details", new { id = Model.IssueId })</li>
           <li class="active">Edit Issue</li>
          </ul>
         <form class="form form-inline form-horizontal" role="form">
            <fieldset>
              <legend class="text-success">Issue Number: @Html.DisplayFor(model => model.IssueCode)</legend>
                <div class="required"><span class="requiredasterisk">*</span> Required</div>
                <div>
                 @Html.ActionLink("Details", "Details", new { id = Model.IssueId }, new { @class = "btn btn-success btn-md" } ) |
                 @Html.ActionLink("Delete", "Delete", new { id = Model.IssueId }, new { onclick = "return DeleteConfirm()", @class = "btn btn-danger btn-md" }) |
                 @Html.ActionLink("Cancel", "Details", new { id = Model.IssueId }, new { @class = "btn btn-primary btn-md" } )
                </div>
                <br /><br />
             <div class="row bckgrd-highlight">
                <div class="col-md-6">
                @Html.LabelFor(model => model.Subject, new { @class="req-asterisk" })
                @Html.TextBoxFor(model => model.Subject, new { @class = "editor-field95 form-control"})
                @Html.ValidationMessageFor(model => model.Subject)
                <br />
               </div>
               <div class="col-md-4">
                @Html.LabelFor(model => model.FPID)
                <br/>
                @Html.TextBoxFor(model => model.FPID, new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.FPID)
                <br/>
              </div>
             </div><!-- row END -->
             <br />
             <div class="row bckgrd-highlight">
              <div class="col-md-4">
                 @Html.LabelFor(model => model.IssueType.Type)
                  <br />
                 @Html.DropDownList("IssueTypeId", null, new { @class = "form-control"})
              </div>
              <div class="col-md-4">
                 @Html.LabelFor(model => model.ECSOSupportCategory.SupportCategory)
                  <br />
                 @Html.DropDownList("ECSOSupportCategoryId", null, "--- Select ---", new { @class = "form-control"})
              </div>
              <div class="col-md-4">
                 @Html.LabelFor(model => model.ECSOSupportProduct.SupportProduct)
                  <br />
                 @Html.DropDownList("ECSOSupportProductId", null, "--- Select ---", new { @class = "form-control"})
                  <br />
              </div>
             </div><!-- row END -->
             <br />
             <div class="row bckgrd-highlight">
              <div class="col-md-4">
                @Html.LabelFor(model => model.FDOTUser.Name, "Assigned To", new { @class="req-asterisk" })
                  <br />
                @Html.DropDownList("FDOTUserId", null, "--- Select ---", new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.FDOTUserId)
              </div>
              <div class="col-md-4">
                @Html.LabelFor(model => model.PriorityCode.Priority)
                 <br />
                @Html.DropDownList("PriorityCodeId", null, new { @class = "form-control"})
              </div>
              <div class="col-md-4">
                @Html.LabelFor(model => model.StatusCode.Status)
                 <br />
                @Html.DropDownList("StatusCodeId", null, new { @class = "form-control"})
                 <br />
              </div> 
             </div><!-- row END -->
             <br />
             <div class="row bckgrd-highlight">
              <div class="col-md-4">
               @Html.LabelFor(model => model.CADDSoftwareProduct.CADDSoftware)
                <br />
               @Html.DropDownList("CADDSoftwareProductId", null, "--- Select ---", new { @class = "form-control"})
              </div>
              <div class="col-md-4">
               @Html.LabelFor(model => model.FDOTReleaseVersion.ReleaseVersion)
                <br />
               @Html.DropDownList("FDOTReleaseVersionId", null, "--- Select ---", new { @class = "form-control"})
              </div>
              <div class="col-md-4">
               @Html.LabelFor(model => model.WindowsOperatingSystem.OperatingSystem)
                <br />
               @Html.DropDownList("WindowsOperatingSystemId", null, new { @class = "form-control"})
               <br />
              </div>
             </div><!-- row END -->
            </fieldset> 
         </form>
         <!-- ISSUE DETAILS SECTION -->
         <fieldset> 
          <legend class="req-asterisk-details">Issue Details</legend>
           <div class="col-md-4 row">
            @Html.TextAreaFor(model => model.Details, new { @class = "detailsTextArea form-control", rows="5", cols="80"})
            @Html.ValidationMessageFor(model => model.Details)
           </div>
         </fieldset>
         <!-- NOTES("HISTORY") SECTION -->
         <fieldset> 
         <legend class="req-asterisk-notes">Notes</legend>
           <div class="col-md-4 row">
            <textarea id="HiddenComment" name="HiddenComment" class="notesTextArea form-control" maxlength="1000" rows="5" cols="80" title="Reason for Change" 
            data-val="true" data-val-required="Reason for change required"></textarea>
           </div>
         </fieldset>
          <br />
          <!-- SAVE CHANGES BUTTON #1 -->
          <div>
           <input id="ButtonSave1" type="submit" value="Save Changes" class="btn btn-success btn-lg center-block"/>
          </div>  
        <!-- CONTACT SECTION -->
        <form class="form-horizontal">
         <fieldset>
          <legend>Contact</legend>
            <div class="form-group row">
              <div class="col-md-4">
                @Html.DropDownList("Contacts", (SelectList)ViewBag.Contact, "--- Select ---", new { @class = "form-control contactsDDL"})
              </div>
            </div>
            <div class="col-md-6">
             <div class="">
              <label for="TextContactName" class="">Name</label>
              <input type="text" id="TextContactName" readonly="readonly" class="form-control" value="@ViewBag.ContactName" />
             </div>
            </div>
            <div class="col-md-6">
             <div class="">
              <label for="TextContactNumber" class="">Phone</label>
              <input type="text" id="TextContactNumber" readonly="readonly" class="form-control" value="@ViewBag.ContactNumber"/>
             </div>
            </div>
            <div class="col-md-6">
             <div class="">
              <label for="TextContactEmail" class="">Email</label>
              <input type="text" id="TextContactEmail" readonly="readonly" class="form-control" value="@ViewBag.EmailAddress"/>
             </div>
            </div>
         </fieldset>
        </form>
       <!-- FILE ATTACHMENT SECTION -->
       <fieldset>
         <legend>Attachments <span><img alt="Attachment" src="@(Url.Content("~/Content/images/attachment.png"))" /></span></legend>
          <div id="" class="">
             <div class="">
               <input type="file" name="UploadFile" class="fileAttachment form-control"/>
                <br /> 
             </div>
             <div class="">
                 <p class="display-label">Attached Files</p>
                 <!-- If file(s) attached -->
                 @if (Model.Attachments != null)
                 {
                   foreach (Bug_Lite.Models.Attachment attachedFile in Model.Attachments.ToList())
                   {
                    <p class="">                
                        @Html.ActionLink(@attachedFile.FileName, "GetAttachment", new { attachmentId = attachedFile.AttachmentId })
                        @Html.ActionLink("Delete File", "DeleteFile", new { attachmentId = attachedFile.AttachmentId, id = Model.IssueId }, new { @class = "btn btn-danger btn-sm" }) 
                    </p>
                   }
                 }
                 <!-- If none attached -->
                 @if(Model.Attachments.Count == 0)
                 {
                   <p class="notification">No File(s) Attached</p>
                 }
                <br />
             </div>  
          </div>
        </fieldset>
       <!-- SAVE CHANGES BUTTON #2 -->
       <div>
        <input id="ButtonSave2" type="submit" value="Save Changes" class="btn btn-success btn-lg center-block"/>
       </div>
       <br />
         <div>
            @Html.ActionLink("Details", "Details", new { id = Model.IssueId }, new { @class = "btn btn-success btn-md" }) |
            @Html.ActionLink("Delete", "Delete", new { id = Model.IssueId }, new { onclick = "return DeleteConfirm()", @class = "btn btn-danger btn-md" }) |
            @Html.ActionLink("Cancel", "Details", new { id = Model.IssueId }, new { @class = "btn btn-primary btn-md" } )
         </div>
       <br />
      </div> <!-- container END -->
      <!-- Delete Issue JS Dialog -->
      <script type="text/javascript">
          function DeleteConfirm() 
          {
            if (confirm("Are you sure you want to delete this issue?"))
                return true;
            else
                return false;
         }
     </script>
}


